name: Custom.All.BruteForce
description: |
   Attempts to detect brute force logins on all devices.

# Can be CLIENT, CLIENT_EVENT, SERVER, SERVER_EVENT
type: CLIENT_EVENT

parameters:
  - name: syslogAuthLogPath
    default: /var/log/auth.log
  - name: sshGrok
    default: >-
      %{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}: %{DATA:event} %{DATA:method} for (invalid user )?%{DATA:user} from %{IPORHOST:ip} port %{NUMBER:port} ssh2(: %{GREEDYDATA:system.auth.ssh.signature})?
  - name: failures
    default: 2
    description: Number of failed logins proceeding a successful login. Anything greater or equal to this generates a row.
  - name: securityLogFile
    default: C:\Windows\System32\Winevt\Logs\Security.evtx

sources:
  - queries:
      - LET opsys <= SELECT Platform from info()

      - LET failed_login = SELECT grok(grok=sshGrok, data=Line) AS FailedEvent,
            Line as FailedLine
        FROM watch_syslog(filename=if(condition= opsys[0].Platform = "centos",
            else=syslogAuthLogPath, then="/var/log/secure"))
        WHERE FailedEvent.program = "sshd" AND FailedEvent.event = "Failed"
              AND FailedEvent.method = "password"

      - LET last_failed_events = SELECT * FROM fifo(
              query=failed_login, max_rows=50, max_age=3600)

      - LET _ <= SELECT * FROM last_failed_events

      - LET success_login = SELECT grok(grok=sshGrok, data=Line) AS Event, Line
        FROM watch_syslog(filename=if(condition= opsys[0].Platform = "centos",
            else=syslogAuthLogPath, then="/var/log/secure"))
        WHERE Event.program = "sshd" AND Event.event = "Accepted"
              AND Event.method = "password"

      - LET linux_check = SELECT Event, Line, {
           SELECT FailedLine FROM last_failed_events
           WHERE Event.user = FailedEvent.user
        } AS Failures
        FROM success_login
        WHERE len(list=Failures) > int(int=failures)

      - LET is_win = SELECT OS from info() WHERE OS = "windows"

      - LET w_failed_login = SELECT EventData as FailedEventData,
            System as FailedSystem
        FROM watch_evtx(filename=securityLogFile)
        WHERE System.EventID.Value = 4625

      - LET w_last_events = SELECT FailedEventData, FailedSystem
        FROM fifo(query=w_failed_login,
                  max_rows=500)

      - LET w_success_login = SELECT EventData as SuccessEventData,
            System as SuccessSystem
        FROM watch_evtx(filename=securityLogFile)
        WHERE System.EventID.Value = 4624

      - LET win_check = SELECT * FROM foreach(
          row=w_success_login,
          query={
            SELECT SuccessSystem.TimeCreated.SystemTime AS LogonTime,
                SuccessSystem, SuccesssEventData,
                enumerate(items=FailedEventData) as FailedEventData,
                FailedSystem, count(items=SuccessSystem) as count
            FROM w_last_events
            WHERE FailedEventData.SubjectUserName = SuccessEventData.SubjectUserName
            GROUP BY LogonTime
          })
        WHERE Count > atoi(string=failures)

      - SELECT * FROM if(condition=is_win, then=win_check, else=linux_check)
